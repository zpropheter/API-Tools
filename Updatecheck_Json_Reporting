#!/bin/bash

#A tool to help admins quickly see the deployed update for individual devices
#File path for exported CSV
jsonFilePathTemp="$HOME/Downloads/AllUpdates.json"
jsonFilePath="$HOME/Downloads/AllUpdatesFinal.json"
jsonScratchpad="$HOME/Downloads/scratchpad.json"
csvFilePath="$HOME/Downloads/CSVData.csv"

#############################################################################
#API Creds
username="username"
password="password"
url="https://yourserver.jamfcloud.com"

#############################################################################
#Bearer Token Auth
#Variable declarations
bearerToken=""
tokenExpirationEpoch="0"

getBearerToken() {
	response=$(curl -s -u "$username":"$password" "$url"/api/v1/auth/token -X POST)
	bearerToken=$(echo "$response" | plutil -extract token raw -)
	tokenExpiration=$(echo "$response" | plutil -extract expires raw - | awk -F . '{print $1}')
	tokenExpirationEpoch=$(date -j -f "%Y-%m-%dT%T" "$tokenExpiration" +"%s")
}

checkTokenExpiration() {
	nowEpochUTC=$(date -j -f "%Y-%m-%dT%T" "$(date -u +"%Y-%m-%dT%T")" +"%s")
	if [[ tokenExpirationEpoch -gt nowEpochUTC ]]
	then
		echo "Token valid until the following epoch time: " "$tokenExpirationEpoch"
	else
		echo "No valid token available, getting new token"
		getBearerToken
	fi
}

invalidateToken() {
	responseCode=$(curl -w "%{http_code}" -H "Authorization: Bearer ${bearerToken}" $url/api/v1/auth/invalidate-token -X POST -s -o /dev/null)
	if [[ ${responseCode} == 204 ]]
	then
		echo "Token successfully invalidated"
		bearerToken=""
		tokenExpirationEpoch="0"
	elif [[ ${responseCode} == 401 ]]
	then
		echo "Token already invalid"
	else
		echo "An unknown error occurred invalidating the token"
	fi
}

#############################################################################
#Test Bearer Token Auth (uncomment to use)
#checkTokenExpiration
#curl -s -H "Authorization: Bearer ${bearerToken}" $url/api/v1/jamf-pro-version -X GET
#checkTokenExpiration
#invalidateToken
#curl -s -H "Authorization: Bearer ${bearerToken}" $url/api/v1/jamf-pro-version -X GET

#############################################################################
#Get Bearer Token
getBearerToken 
#############################################################################
pageSize="100"
page="0"
#Pull all devices plans from newest to oldest
initialUpdatePlanCheck=$(curl -X 'GET' \
"$url/api/v1/managed-software-updates/plans?page=$page&page-size=$pageSize&sort=planUuid%3Adesc" \
-H 'accept: application/json' \
-H "Authorization: Bearer $bearerToken")

#echo $initialUpdatePlanCheck
echo $initialUpdatePlanCheck > $jsonFilePath

#JQ Filter Function on output json from API calls.
jq -s '.[].results[]'  "$jsonFilePath" > $jsonFilePathTemp && mv $jsonFilePathTemp $jsonFilePath

getCountOfResults=$(jq -r -c '.[]' <<< "$initialUpdatePlanCheck" | awk '{print $1}')
filterGetCountOfResults=$(awk -F, 'NR==1{print $1}' <<<"$getCountOfResults")

#Do some math to check if we need to keep going up from page size

#if pagesize/filtergetcountofresults le=1 then +1 page
#WARNING 'expr' will round to nearest whole number
realPageNumber=$(expr $page + 1)
#echo $realPageNumber
totalPossibleResults=$(expr $pageSize \* $realPageNumber)
#echo $totalPossibleResults

#Make a for loop that goes through multiple pages if found and get next page if needed
while [ $totalPossibleResults -lt $filterGetCountOfResults ]; do
	echo "more update results pending, fetching now"
	((page++))
	realPageNumber=$(expr $page + 1)
	echo "current real page number is $realPageNumber"
	totalPossibleResults=$(expr $pageSize \* $realPageNumber)
	echo "total possible results are $filterGetCountOfResults"
	checkTokenExpiration 
	UpdatePlanCheck=$(curl -X 'GET' \
		"$url/api/v1/managed-software-updates/plans?page=$page&page-size=$pageSize&sort=planUuid%3Adesc" \
		-H 'accept: application/json' \
		-H "Authorization: Bearer $bearerToken")
	echo $UpdatePlanCheck > $jsonFilePathTemp
	#echo -e "\n" >> $jsonFilePath
	#JQ Filter Function on output json from API calls.
	jq -s '.[].results[]'  "$jsonFilePathTemp" >> $jsonFilePath	
done

jq -s 'group_by(.device[]) | map({DeviceId: .[0].device.deviceId, Status: map(.status.state) | 
	unique, Device_Type: map(.device.objectType) | 
	unique,  Version_Type: map(.versionType) |
	unique, Error_Reasons: map(.status.errorReasons[])})' $jsonFilePath > $jsonFilePathTemp && mv $jsonFilePathTemp $jsonFilePath
